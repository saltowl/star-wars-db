{"version":3,"sources":["components/error-block/jedi-order-brands.svg","components/swapi-service-context/swapi-service-context.js","utils/to-camel-case.js","components/error-block/error-block-view.js","components/error-boundary/error-boundary-container.js","components/app-header/app-header-view.js","components/item-list/item-list-view.js","components/spinner/spinner-view.js","components/hoc-helpers/with-data.js","components/hoc-helpers/with-child-function.js","components/hoc-helpers/with-swapi-service.js","components/hoc-helpers/compose.js","components/main-components/item-lists.js","components/item-details/item-view.js","components/item-details/item-details-view.js","components/item-details/item-details-container.js","components/record/record-view.js","components/record-link/record-link-view.js","components/main-components/person-details.js","components/main-components/planet-details.js","components/main-components/starship-details.js","components/random-planet/random-planet-container.js","components/row/row-view.js","components/pages/people-page.js","components/pages/planet-page.js","components/pages/starship-page.js","components/app/app-view.js","services/swapi-service.js","index.js"],"names":["module","exports","SwapiServiceContext","React","createContext","isArray","a","Array","keysToCamel","o","Object","isObject","n","keys","forEach","k","s","replace","$1","toUpperCase","map","i","ErrorBlock","message","className","src","icon","alt","defaultProps","memo","ErrorBoundaryContainer","state","hasError","this","setState","props","children","PureComponent","to","ItemList","data","onItemSelected","itemList","item","id","key","onClick","View","useState","error","loading","getData","useEffect","then","catch","fn","Wrapped","mapMethodsToProps","swapiService","useContext","serviceProps","funcs","component","reduceRight","prevResultComponent","func","PersonList","compose","withSwapiService","getAllPeople","withData","withChildFunction","name","PlanetList","getAllPlanets","population","StarshipList","getAllStarships","model","image","Fragment","Children","child","cloneElement","type","showItem","showInitialMessage","ItemDetailsContainer","itemId","getImageUrl","st","cancelled","label","field","link","getPerson","getPersonImage","getPlanet","getPlanetImage","getStarship","getStarshipImage","RandomPlanet","updateInterval","setId","updatePlanet","Math","floor","random","toString","timer","setInterval","clearInterval","columnClass","length","columns","withRouter","history","match","params","push","_baseUrl","_imageUrl","getResource","url","fetch","res","ok","Error","status","json","results","_transformPerson","person","_transformPlanet","planet","_transformStarship","starship","_getId","toCamelCase","rotationPeriod","diameter","gender","birthYear","eyeColor","homeworld","homeworldId","manufacturer","costInCredits","crew","passengers","cargoCapacity","location","Provider","value","test","pathname","path","exact","render","PeoplePage","PlanetPage","StarshipPage","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5f391aa5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/jedi-order-brands.d835081d.svg\";","import React from 'react';\r\n\r\nexport const SwapiServiceContext = React.createContext();\r\n","const isObject = (o) => o === Object(o) && !isArray(o) && typeof o !== 'function';\r\n\r\nconst isArray = (a) => Array.isArray(a);\r\n\r\nconst toCamel = (s) =>\r\n  s.replace(/([-_][a-z])/gi, ($1) => $1.toUpperCase().replace('-', '').replace('_', ''));\r\n\r\nconst keysToCamel = (o) => {\r\n  if (isObject(o)) {\r\n    const n = {};\r\n\r\n    Object.keys(o).forEach((k) => {\r\n      n[toCamel(k)] = keysToCamel(o[k]);\r\n    });\r\n\r\n    return n;\r\n  } else if (isArray(o)) {\r\n    return o.map((i) => keysToCamel(i));\r\n  }\r\n\r\n  return o;\r\n};\r\n\r\nexport default keysToCamel;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './error-block.css';\r\nimport icon from './jedi-order-brands.svg';\r\n\r\nfunction ErrorBlock({ message }) {\r\n  return (\r\n    <div className=\"error-block d-flex row\">\r\n      <img className=\"error-block__icon col-4\" src={icon} alt=\"error icon\" />\r\n      <div className=\"error-block__info d-flex col-8\">\r\n        <span>{message}</span>\r\n        <span>(but we already sent droids to fix it)</span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nErrorBlock.defaultProps = {\r\n  message: 'Something wents wrong',\r\n};\r\n\r\nErrorBlock.propTypes = {\r\n  message: PropTypes.string,\r\n};\r\n\r\nexport default React.memo(ErrorBlock);\r\n","import React from 'react';\r\nimport ErrorBlock from '../error-block';\r\n\r\nexport default class ErrorBoundaryContainer extends React.PureComponent {\r\n  state = {\r\n    hasError: false,\r\n  };\r\n\r\n  componentDidCatch() {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <ErrorBlock />;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './app-header.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default React.memo(function AppHeader() {\r\n  return (\r\n    <header className=\"header d-flex\">\r\n      <h1>\r\n        <Link to=\"/\">Star Wars Database</Link>\r\n      </h1>\r\n      <ul className=\"d-flex\">\r\n        <li>\r\n          <Link to=\"/people/\">People</Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/planets/\">Planets</Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/starships/\">Starships</Link>\r\n        </li>\r\n      </ul>\r\n    </header>\r\n  );\r\n});\r\n","import React from 'react';\r\nimport './item-list.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction ItemList({ data, onItemSelected, children }) {\r\n  const itemList = data.map((item) => {\r\n    const { id } = item;\r\n    return (\r\n      <li className=\"list-group-item\" key={id} onClick={() => onItemSelected(id)}>\r\n        {children(item)}\r\n      </li>\r\n    );\r\n  });\r\n  return <ul className=\"item-list list-group\">{itemList}</ul>;\r\n}\r\n\r\nItemList.defaultProps = {\r\n  onItemSelected: () => {},\r\n};\r\n\r\nItemList.propTypes = {\r\n  onItemSelected: PropTypes.func,\r\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  children: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default React.memo(ItemList);\r\n","import React from 'react';\r\nimport './spinner.css';\r\n\r\nexport default React.memo(function Spinner() {\r\n  return (\r\n    <div className=\"loadingio-spinner-dual-ball-ip8n5nh7as\">\r\n      <div className=\"ldio-p5tcz5ewrh\">\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n","import React, { useState, useEffect } from 'react';\r\nimport Spinner from '../spinner';\r\nimport ErrorBlock from '../error-block';\r\n\r\nexport default (View) => (props) => {\r\n  const [state, setState] = useState({ data: null, error: false, loading: true });\r\n  const { getData } = props;\r\n\r\n  useEffect(() => {\r\n    getData()\r\n      .then((data) => setState((state) => ({ ...state, data, loading: false })))\r\n      .catch(() => setState((state) => ({ ...state, error: true, loading: false })));\r\n  }, [getData]);\r\n\r\n  const { loading, error, data } = state;\r\n\r\n  if (loading) {\r\n    return <Spinner />;\r\n  }\r\n\r\n  if (error) {\r\n    return <ErrorBlock />;\r\n  }\r\n\r\n  return <View {...props} data={data} />;\r\n};\r\n","import React from 'react';\r\n\r\nexport default (fn) => (Wrapped) => {\r\n  return (props) => {\r\n    return <Wrapped {...props}>{fn}</Wrapped>;\r\n  };\r\n};\r\n","import React, { useContext } from 'react';\r\nimport { SwapiServiceContext } from '../swapi-service-context';\r\n\r\nexport default (mapMethodsToProps) => (Wrapped) => {\r\n  return (props) => {\r\n    const swapiService = useContext(SwapiServiceContext);\r\n    const serviceProps = mapMethodsToProps(swapiService);\r\n    return <Wrapped {...props} {...serviceProps} />;\r\n  };\r\n};\r\n","export default (...funcs) => (component) =>\r\n  funcs.reduceRight((prevResultComponent, func) => func(prevResultComponent), component);\r\n","import React from 'react';\r\nimport ItemList from '../item-list';\r\nimport { withData, withChildFunction, withSwapiService, compose } from '../hoc-helpers';\r\n\r\nconst renderName = ({ name }) => <span>{name}</span>;\r\nconst renderNameAndModel = ({ name, model }) => (\r\n  <span>\r\n    {name} ({model})\r\n  </span>\r\n);\r\nconst renderNameAndPopulation = ({ name, population }) => (\r\n  <span>\r\n    {name} ({population})\r\n  </span>\r\n);\r\n\r\nconst mapPersonMethodsToProps = (swapiService) => ({\r\n  getData: swapiService.getAllPeople,\r\n});\r\nexport const PersonList = compose(\r\n  withSwapiService(mapPersonMethodsToProps),\r\n  withData,\r\n  withChildFunction(renderName),\r\n)(ItemList);\r\n\r\nconst mapPlanetMethodsToProps = (swapiService) => ({\r\n  getData: swapiService.getAllPlanets,\r\n});\r\nexport const PlanetList = compose(\r\n  withSwapiService(mapPlanetMethodsToProps),\r\n  withData,\r\n  withChildFunction(renderNameAndPopulation),\r\n)(ItemList);\r\n\r\nconst mapStarshipMethodsToProps = (swapiService) => ({\r\n  getData: swapiService.getAllStarships,\r\n});\r\nexport const StarshipList = compose(\r\n  withSwapiService(mapStarshipMethodsToProps),\r\n  withData,\r\n  withChildFunction(renderNameAndModel),\r\n)(ItemList);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Item({ item, image, children }) {\r\n  const { name } = item;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <img className=\"item-details__image img-fluid\" src={image} alt={name} />\r\n      <div className=\"card-body\">\r\n        <h4>{name}</h4>\r\n        <ul className=\"list-group list-group-flush\">\r\n          {React.Children.map(children, (child) => React.cloneElement(child, { item }))}\r\n        </ul>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nItem.propTypes = {\r\n  item: PropTypes.shape({\r\n    name: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n  image: PropTypes.string.isRequired,\r\n  children: PropTypes.arrayOf(PropTypes.node).isRequired,\r\n};\r\n\r\nexport default React.memo(Item);\r\n","import React from 'react';\r\nimport './item-details.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Spinner from '../spinner';\r\nimport Item from './item-view';\r\nimport ErrorBlock from '../error-block';\r\n\r\nfunction ItemDetails({ item, image, loading, error, children, type }) {\r\n  const showItem = item && !loading && !error;\r\n  const showInitialMessage = item === null && !loading && !error;\r\n\r\n  return (\r\n    <div className=\"item-details card d-flex\">\r\n      {loading && <Spinner />}\r\n      {showItem && (\r\n        <Item item={item} image={image}>\r\n          {children}\r\n        </Item>\r\n      )}\r\n      {showInitialMessage && <span>Select {type} from a list</span>}\r\n      {error && <ErrorBlock />}\r\n    </div>\r\n  );\r\n}\r\n\r\nItemDetails.propTypes = {\r\n  item: PropTypes.object,\r\n  image: PropTypes.string,\r\n  loading: PropTypes.bool.isRequired,\r\n  error: PropTypes.bool.isRequired,\r\n  children: PropTypes.arrayOf(PropTypes.node),\r\n};\r\n\r\nexport default React.memo(ItemDetails);\r\n","import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ItemDetails from './item-details-view';\r\n\r\nfunction ItemDetailsContainer(props) {\r\n  const { itemId, getData, getImageUrl } = props;\r\n\r\n  const [state, setState] = useState({\r\n    item: null,\r\n    image: null,\r\n    loading: false,\r\n    error: false,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (itemId !== null) {\r\n      setState((st) => ({ ...st, loading: true }));\r\n\r\n      let cancelled = false;\r\n\r\n      getData(itemId)\r\n        .then(\r\n          (item) =>\r\n            !cancelled &&\r\n            setState((st) => ({ ...st, item, loading: false, image: getImageUrl(item) })),\r\n        )\r\n        .catch(\r\n          () => !cancelled && setState((st) => ({ ...st, error: true, loading: false })),\r\n        );\r\n\r\n      return () => (cancelled = true);\r\n    }\r\n  }, [itemId, getData, getImageUrl]);\r\n\r\n  return <ItemDetails {...props} {...state} />;\r\n}\r\n\r\nItemDetailsContainer.defaultProps = {\r\n  type: 'an item',\r\n};\r\n\r\nItemDetailsContainer.propTypes = {\r\n  itemId: PropTypes.string,\r\n  getData: PropTypes.func.isRequired,\r\n  getImageUrl: PropTypes.func.isRequired,\r\n  type: PropTypes.string,\r\n};\r\n\r\nexport default React.memo(ItemDetailsContainer);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Record({ item, label, field }) {\r\n  return (\r\n    <li className=\"list-group-item\">\r\n      <span className=\"term\">{label}:</span>\r\n      <span>{item[field]}</span>\r\n    </li>\r\n  );\r\n}\r\n\r\nRecord.propTypes = {\r\n  item: PropTypes.object,\r\n  label: PropTypes.string.isRequired,\r\n  field: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default React.memo(Record);\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction RecordLink({ item, label, field }) {\r\n  return (\r\n    <li className=\"list-group-item\">\r\n      <span className=\"term\">\r\n        <Link to={item[field].link}>{label}</Link>\r\n      </span>\r\n    </li>\r\n  );\r\n}\r\n\r\nRecordLink.propTypes = {\r\n  item: PropTypes.object,\r\n  label: PropTypes.string.isRequired,\r\n  field: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default React.memo(RecordLink);\r\n","import React from 'react';\r\nimport ItemDetails from '../item-details';\r\nimport Record from '../record';\r\nimport Link from '../record-link';\r\nimport { withSwapiService } from '../hoc-helpers';\r\n\r\nconst PersonDetails = (props) => (\r\n  <ItemDetails {...props} type=\"a person\">\r\n    <Link field=\"homeworld\" label=\"Homeworld\" key={'person homeworld'} />\r\n    <Record field=\"gender\" label=\"Gender\" key={'person gender'} />\r\n    <Record field=\"eyeColor\" label=\"Eye Color\" key={'person eye color'} />\r\n    <Record field=\"birthYear\" label=\"Birth Year\" key={'person birth year'} />\r\n  </ItemDetails>\r\n);\r\n\r\nconst mapMethodsToProps = (swapiService) => ({\r\n  getData: swapiService.getPerson,\r\n  getImageUrl: swapiService.getPersonImage,\r\n});\r\n\r\nexport default withSwapiService(mapMethodsToProps)(PersonDetails);\r\n","import React from 'react';\r\nimport ItemDetails from '../item-details';\r\nimport Record from '../record';\r\nimport { withSwapiService } from '../hoc-helpers';\r\n\r\nconst PlanetDetails = (props) => (\r\n  <ItemDetails {...props} type=\"a planet\">\r\n    <Record field=\"population\" label=\"Population\" key={'planet population'} />\r\n    <Record\r\n      field=\"rotationPeriod\"\r\n      label=\"Rotation Period\"\r\n      key={'planet rotation period'}\r\n    />\r\n    <Record field=\"diameter\" label=\"Diameter\" key={'planet diameter'} />\r\n  </ItemDetails>\r\n);\r\n\r\nconst mapMethodsToProps = (swapiService) => ({\r\n  getData: swapiService.getPlanet,\r\n  getImageUrl: swapiService.getPlanetImage,\r\n});\r\n\r\nexport default withSwapiService(mapMethodsToProps)(PlanetDetails);\r\n","import React from 'react';\r\nimport ItemDetails from '../item-details';\r\nimport Record from '../record';\r\nimport { withSwapiService } from '../hoc-helpers';\r\n\r\nconst StarshipDetails = (props) => (\r\n  <ItemDetails {...props} type=\"a starship\">\r\n    <Record field=\"model\" label=\"Model\" key={'starship model'} />\r\n    <Record field=\"length\" label=\"Length\" key={'starship length'} />\r\n    <Record field=\"costInCredits\" label=\"Cost\" key={'starship cost in credits'} />\r\n    <Record field=\"manufacturer\" label=\"Manufacturer\" key={'starship manufacturer'} />\r\n    <Record field=\"crew\" label=\"Crew\" key={'starship crew'} />\r\n    <Record field=\"passengers\" label=\"Passengers\" key={'starship passengers'} />\r\n    <Record\r\n      field=\"cargoCapacity\"\r\n      label=\"Cargo capacity\"\r\n      key={'starship cargo capacity'}\r\n    />\r\n  </ItemDetails>\r\n);\r\n\r\nconst mapMethodsToProps = (swapiService) => ({\r\n  getData: swapiService.getStarship,\r\n  getImageUrl: swapiService.getStarshipImage,\r\n});\r\n\r\nexport default withSwapiService(mapMethodsToProps)(StarshipDetails);\r\n","import React, { useEffect, useState } from 'react';\r\nimport { PlanetDetails } from '../main-components';\r\nimport PropTypes from 'prop-types';\r\nimport './random-planet.css';\r\n\r\nfunction RandomPlanet({ updateInterval }) {\r\n  const [id, setId] = useState(null);\r\n\r\n  const updatePlanet = () => setId((Math.floor(Math.random() * 25) + 1).toString());\r\n\r\n  useEffect(() => {\r\n    updatePlanet();\r\n    const timer = setInterval(updatePlanet, updateInterval);\r\n    return () => clearInterval(timer);\r\n  }, [updateInterval]);\r\n\r\n  return (\r\n    <article className=\"random-planet jumbotron rounded d-flex\">\r\n      <PlanetDetails itemId={id} />\r\n    </article>\r\n  );\r\n}\r\n\r\nRandomPlanet.defaultProps = {\r\n  updateInterval: 10000,\r\n};\r\n\r\nRandomPlanet.propTypes = {\r\n  updateInterval: PropTypes.number,\r\n};\r\n\r\nexport default React.memo(RandomPlanet);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Row({ children }) {\r\n  const columnClass = `col-md-${Math.floor(12 / children.length)}`;\r\n  const columns = children.map((child, i) => (\r\n    <div className={columnClass} key={i}>\r\n      {child}\r\n    </div>\r\n  ));\r\n\r\n  return <div className=\"row mb2\">{columns}</div>;\r\n}\r\n\r\nRow.propTypes = {\r\n  children: PropTypes.arrayOf(PropTypes.node).isRequired,\r\n};\r\n\r\nexport default React.memo(Row);\r\n","import React from 'react';\r\nimport ErrorBoundary from '../error-boundary';\r\nimport Row from '../row';\r\nimport { PersonList, PersonDetails } from '../main-components';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nfunction PeoplePage({ history, match }) {\r\n  return (\r\n    <ErrorBoundary>\r\n      <Row>\r\n        <PersonDetails itemId={match.params.id || null} />\r\n        <PersonList onItemSelected={(id) => history.push(id)} />\r\n      </Row>\r\n    </ErrorBoundary>\r\n  );\r\n}\r\n\r\nexport default withRouter(PeoplePage);\r\n","import React from 'react';\r\nimport ErrorBoundary from '../error-boundary';\r\nimport Row from '../row';\r\nimport { PlanetList, PlanetDetails } from '../main-components';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nfunction PlanetPage({ match, history }) {\r\n  return (\r\n    <ErrorBoundary>\r\n      <Row>\r\n        <PlanetDetails itemId={match.params.id || null} />\r\n        <PlanetList onItemSelected={(id) => history.push(id)} />\r\n      </Row>\r\n    </ErrorBoundary>\r\n  );\r\n}\r\n\r\nexport default withRouter(PlanetPage);\r\n","import React from 'react';\r\nimport ErrorBoundary from '../error-boundary';\r\nimport { StarshipList } from '../main-components';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nfunction StarshipPage({ history }) {\r\n  return (\r\n    <ErrorBoundary>\r\n      <StarshipList onItemSelected={(id) => history.push(id)} />\r\n    </ErrorBoundary>\r\n  );\r\n}\r\n\r\nexport default withRouter(StarshipPage);\r\n","import React from 'react';\r\nimport './app.css';\r\n\r\nimport { SwapiServiceContext } from '../swapi-service-context';\r\nimport SwapiService from '../../services/swapi-service';\r\n\r\nimport ErrorBoundary from '../error-boundary';\r\n\r\nimport AppHeader from '../app-header';\r\nimport RandomPlanet from '../random-planet';\r\nimport { StarshipDetails } from '../main-components';\r\nimport { PeoplePage, PlanetPage, StarshipPage } from '../pages';\r\n\r\nimport { Route, Switch, withRouter } from 'react-router-dom';\r\n\r\nconst swapiService = new SwapiService();\r\n\r\nfunction App({ location }) {\r\n  return (\r\n    <div className=\"app col mb2 container\">\r\n      <ErrorBoundary>\r\n        <SwapiServiceContext.Provider value={swapiService}>\r\n          <AppHeader />\r\n          {!/\\/starships\\/[\\d]+/.test(location.pathname) && <RandomPlanet />}\r\n          <Switch>\r\n            <Route path=\"/\" exact render={() => <h1>Welcome to Star Wars database</h1>} />\r\n\r\n            <Route path=\"/people/:id?\" exact component={PeoplePage} />\r\n\r\n            <Route path=\"/planets/:id?\" component={PlanetPage} />\r\n\r\n            <Route path=\"/starships\" exact component={StarshipPage} />\r\n            <Route\r\n              path=\"/starships/:id\"\r\n              render={({ match }) => <StarshipDetails itemId={match.params.id} />}\r\n            />\r\n\r\n            <Route render={() => <h1>Page not found</h1>} />\r\n          </Switch>\r\n        </SwapiServiceContext.Provider>\r\n      </ErrorBoundary>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(React.memo(App));\r\n","import toCamelCase from '../utils/to-camel-case';\r\n\r\nexport default class SwapiService {\r\n  _baseUrl = 'https://swapi.dev/api';\r\n  _imageUrl = 'https://starwars-visualguide.com/assets/img';\r\n\r\n  getResource = async (url) => {\r\n    const res = await fetch(`${this._baseUrl}${url}`);\r\n    if (!res.ok) {\r\n      throw new Error(`Couldn't fetch ${this._baseUrl}${url} received ${res.status}`);\r\n    }\r\n    return await res.json();\r\n  };\r\n\r\n  getAllPeople = async () => {\r\n    const res = await this.getResource('/people/');\r\n    return res.results.map(this._transformPerson);\r\n  };\r\n\r\n  getPerson = async (id) => {\r\n    const person = await this.getResource(`/people/${id}/`);\r\n    return this._transformPerson(person);\r\n  };\r\n\r\n  getPersonImage = ({ id }) => `${this._imageUrl}/characters/${id}.jpg`;\r\n\r\n  getPlanetImage = ({ id }) => `${this._imageUrl}/planets/${id}.jpg`;\r\n\r\n  getStarshipImage = ({ id }) => `${this._imageUrl}/starships/${id}.jpg`;\r\n\r\n  getAllPlanets = async () => {\r\n    const res = await this.getResource('/planets/');\r\n    return res.results.map(this._transformPlanet);\r\n  };\r\n\r\n  getPlanet = async (id) => {\r\n    const planet = await this.getResource(`/planets/${id}/`);\r\n    return this._transformPlanet(planet);\r\n  };\r\n\r\n  getAllStarships = async () => {\r\n    const res = await this.getResource('/starships/');\r\n    return res.results.map(this._transformStarship);\r\n  };\r\n\r\n  getStarship = async (id) => {\r\n    const starship = await this.getResource(`/starships/${id}/`);\r\n    return this._transformStarship(starship);\r\n  };\r\n\r\n  _getId = (url) => url.match(/\\/(\\d+)\\/$/)[1];\r\n\r\n  _transformPlanet = (planet) => {\r\n    const { name, population, rotationPeriod, diameter, url } = toCamelCase(planet);\r\n    return {\r\n      id: this._getId(url),\r\n      name,\r\n      population,\r\n      rotationPeriod,\r\n      diameter,\r\n    };\r\n  };\r\n\r\n  _transformPerson = (person) => {\r\n    const { url, name, gender, birthYear, eyeColor, homeworld } = toCamelCase(person);\r\n    const homeworldId = this._getId(homeworld);\r\n\r\n    return {\r\n      id: this._getId(url),\r\n      name,\r\n      gender,\r\n      birthYear,\r\n      eyeColor,\r\n      homeworld: {\r\n        link: `/planets/${homeworldId}`,\r\n      },\r\n    };\r\n  };\r\n\r\n  _transformStarship = (starship) => {\r\n    const {\r\n      url,\r\n      name,\r\n      model,\r\n      manufacturer,\r\n      costInCredits,\r\n      length,\r\n      crew,\r\n      passengers,\r\n      cargoCapacity,\r\n    } = toCamelCase(starship);\r\n    return {\r\n      id: this._getId(url),\r\n      name,\r\n      model,\r\n      costInCredits,\r\n      manufacturer,\r\n      length,\r\n      crew,\r\n      passengers,\r\n      cargoCapacity,\r\n    };\r\n  };\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\n\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}